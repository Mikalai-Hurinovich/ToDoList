[{"D:\\react-prosto\\ToDoList\\src\\index.tsx":"1","D:\\react-prosto\\ToDoList\\src\\features\\Login\\authReducer.tsx":"2","D:\\react-prosto\\ToDoList\\src\\utils\\error-utils.ts":"3","D:\\react-prosto\\ToDoList\\src\\app\\store.ts":"4","D:\\react-prosto\\ToDoList\\src\\app\\App.tsx":"5","D:\\react-prosto\\ToDoList\\src\\app\\app-reducer.ts":"6","D:\\react-prosto\\ToDoList\\src\\features\\TodolistsList\\tasks-reducer.ts":"7","D:\\react-prosto\\ToDoList\\src\\features\\TodolistsList\\todolists-reducer.ts":"8","D:\\react-prosto\\ToDoList\\src\\features\\TodolistsList\\TodolistsList.tsx":"9","D:\\react-prosto\\ToDoList\\src\\features\\Login\\Login.tsx":"10","D:\\react-prosto\\ToDoList\\src\\components\\ErrorSnackbar\\ErrorSnackbar.tsx":"11","D:\\react-prosto\\ToDoList\\src\\api\\todolists-api.ts":"12","D:\\react-prosto\\ToDoList\\src\\components\\AddItemForm\\AddItemForm.tsx":"13","D:\\react-prosto\\ToDoList\\src\\features\\TodolistsList\\Todolist\\Todolist.tsx":"14","D:\\react-prosto\\ToDoList\\src\\features\\TodolistsList\\Todolist\\Task\\Task.tsx":"15","D:\\react-prosto\\ToDoList\\src\\components\\EditableSpan\\EditableSpan.tsx":"16"},{"size":420,"mtime":1622456510357,"results":"17","hashOfConfig":"18"},{"size":1977,"mtime":1622455147821,"results":"19","hashOfConfig":"18"},{"size":811,"mtime":1596719330000,"results":"20","hashOfConfig":"18"},{"size":1183,"mtime":1621856778047,"results":"21","hashOfConfig":"18"},{"size":3113,"mtime":1622456157846,"results":"22","hashOfConfig":"18"},{"size":2141,"mtime":1621920153756,"results":"23","hashOfConfig":"18"},{"size":5617,"mtime":1622455147836,"results":"24","hashOfConfig":"18"},{"size":4580,"mtime":1622455147867,"results":"25","hashOfConfig":"18"},{"size":4027,"mtime":1621859087715,"results":"26","hashOfConfig":"18"},{"size":3475,"mtime":1621858392545,"results":"27","hashOfConfig":"18"},{"size":1092,"mtime":1596716576000,"results":"28","hashOfConfig":"18"},{"size":2943,"mtime":1622454846388,"results":"29","hashOfConfig":"18"},{"size":1569,"mtime":1621853731385,"results":"30","hashOfConfig":"18"},{"size":4193,"mtime":1596715250000,"results":"31","hashOfConfig":"18"},{"size":1773,"mtime":1596295538000,"results":"32","hashOfConfig":"18"},{"size":952,"mtime":1594154724000,"results":"33","hashOfConfig":"18"},{"filePath":"34","messages":"35","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"d7pgyi",{"filePath":"36","messages":"37","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"38","messages":"39","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"40"},{"filePath":"41","messages":"42","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"40"},{"filePath":"43","messages":"44","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"45","messages":"46","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"40"},{"filePath":"47","messages":"48","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"49","messages":"50","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"51","messages":"52","errorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":"53","usedDeprecatedRules":"40"},{"filePath":"54","messages":"55","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":1,"source":"56","usedDeprecatedRules":"40"},{"filePath":"57","messages":"58","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"40"},{"filePath":"59","messages":"60","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"61","messages":"62","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"40"},{"filePath":"63","messages":"64","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"65","usedDeprecatedRules":"40"},{"filePath":"66","messages":"67","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"68","usedDeprecatedRules":"40"},{"filePath":"69","messages":"70","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"40"},"D:\\react-prosto\\ToDoList\\src\\index.tsx",[],"D:\\react-prosto\\ToDoList\\src\\features\\Login\\authReducer.tsx",[],"D:\\react-prosto\\ToDoList\\src\\utils\\error-utils.ts",[],["71","72"],"D:\\react-prosto\\ToDoList\\src\\app\\store.ts",[],"D:\\react-prosto\\ToDoList\\src\\app\\App.tsx",["73"],"D:\\react-prosto\\ToDoList\\src\\app\\app-reducer.ts",[],"D:\\react-prosto\\ToDoList\\src\\features\\TodolistsList\\tasks-reducer.ts",["74"],"D:\\react-prosto\\ToDoList\\src\\features\\TodolistsList\\todolists-reducer.ts",["75"],"D:\\react-prosto\\ToDoList\\src\\features\\TodolistsList\\TodolistsList.tsx",["76","77","78","79","80","81","82","83"],"import React, {useCallback, useEffect} from 'react'\r\nimport {useDispatch, useSelector} from 'react-redux'\r\nimport {AppRootStateType} from '../../app/store'\r\nimport {\r\n    addTodolistTC,\r\n    changeTodolistFilterAC,\r\n    changeTodolistTitleTC,\r\n    fetchTodolistsTC,\r\n    FilterValuesType,\r\n    removeTodolistTC,\r\n    TodolistDomainType\r\n} from './todolists-reducer'\r\nimport {addTaskTC, removeTaskTC, TasksStateType, updateTaskTC} from './tasks-reducer'\r\nimport {TaskStatuses} from '../../api/todolists-api'\r\nimport {Grid, Paper} from '@material-ui/core'\r\nimport {AddItemForm} from '../../components/AddItemForm/AddItemForm'\r\nimport {Todolist} from './Todolist/Todolist'\r\nimport {Redirect} from \"react-router-dom\";\r\n\r\ntype PropsType = {\r\n    demo?: boolean\r\n}\r\n\r\nexport const TodolistsList: React.FC<PropsType> = ({demo = false}) => {\r\n    const isLoggedIn = useSelector<AppRootStateType, boolean>(state => state.auth.isLoggedIn)\r\n    const todolists = useSelector<AppRootStateType, Array<TodolistDomainType>>(state => state.todolists)\r\n    const tasks = useSelector<AppRootStateType, TasksStateType>(state => state.tasks)\r\n    const dispatch = useDispatch()\r\n\r\n    useEffect(() => {\r\n        if (demo || !isLoggedIn) {\r\n            return;\r\n        }\r\n        const thunk = fetchTodolistsTC()\r\n        dispatch(thunk)\r\n    }, [])\r\n\r\n    const removeTask = useCallback(function (id: string, todolistId: string) {\r\n        const thunk = removeTaskTC(id, todolistId)\r\n        dispatch(thunk)\r\n    }, [])\r\n\r\n    const addTask = useCallback(function (title: string, todolistId: string) {\r\n        const thunk = addTaskTC(title, todolistId)\r\n        dispatch(thunk)\r\n    }, [])\r\n\r\n    const changeStatus = useCallback(function (id: string, status: TaskStatuses, todolistId: string) {\r\n        const thunk = updateTaskTC(id, {status}, todolistId)\r\n        dispatch(thunk)\r\n    }, [])\r\n\r\n    const changeTaskTitle = useCallback(function (id: string, newTitle: string, todolistId: string) {\r\n        const thunk = updateTaskTC(id, {title: newTitle}, todolistId)\r\n        dispatch(thunk)\r\n    }, [])\r\n\r\n    const changeFilter = useCallback(function (value: FilterValuesType, todolistId: string) {\r\n        const action = changeTodolistFilterAC(todolistId, value)\r\n        dispatch(action)\r\n    }, [])\r\n\r\n    const removeTodolist = useCallback(function (id: string) {\r\n        const thunk = removeTodolistTC(id)\r\n        dispatch(thunk)\r\n    }, [])\r\n\r\n    const changeTodolistTitle = useCallback(function (id: string, title: string) {\r\n        const thunk = changeTodolistTitleTC(id, title)\r\n        dispatch(thunk)\r\n    }, [])\r\n\r\n    const addTodolist = useCallback((title: string) => {\r\n        const thunk = addTodolistTC(title)\r\n        dispatch(thunk)\r\n    }, [dispatch])\r\n\r\n    if (!isLoggedIn) {\r\n        return <Redirect to={'/login'}/>\r\n    }\r\n    return <>\r\n        <Grid container style={{padding: '20px'}}>\r\n            <AddItemForm addItem={addTodolist}/>\r\n        </Grid>\r\n        <Grid container spacing={3}>\r\n            {\r\n                todolists.map(tl => {\r\n                    let allTodolistTasks = tasks[tl.id]\r\n\r\n                    return <Grid item key={tl.id}>\r\n                        <Paper style={{padding: '10px'}}>\r\n                            <Todolist\r\n                                todolist={tl}\r\n                                tasks={allTodolistTasks}\r\n                                removeTask={removeTask}\r\n                                changeFilter={changeFilter}\r\n                                addTask={addTask}\r\n                                changeTaskStatus={changeStatus}\r\n                                removeTodolist={removeTodolist}\r\n                                changeTaskTitle={changeTaskTitle}\r\n                                changeTodolistTitle={changeTodolistTitle}\r\n                                demo={demo}\r\n                            />\r\n                        </Paper>\r\n                    </Grid>\r\n                })\r\n            }\r\n        </Grid>\r\n    </>\r\n}\r\n","D:\\react-prosto\\ToDoList\\src\\features\\Login\\Login.tsx",["84"],"import React from 'react'\nimport {Checkbox, FormControl, FormControlLabel, FormGroup, FormLabel, TextField, Button, Grid} from '@material-ui/core'\nimport {useFormik} from 'formik';\nimport {useDispatch, useSelector} from \"react-redux\";\nimport {loginTC} from \"./authReducer\";\nimport {AppRootStateType} from \"../../app/store\";\nimport {Redirect} from \"react-router-dom\";\n\ntype FormikErrorType = {\n    email?: string\n    password?: string\n    rememberMe?: boolean\n}\n\nexport const Login = () => {\n    const isLoggedIn = useSelector<AppRootStateType, boolean>(state => state.auth.isLoggedIn)\n    const dispatch = useDispatch();\n    const formik = useFormik({\n        initialValues: {\n            email: '',\n            password: '',\n            rememberMe: false\n        },\n        onSubmit: values => {\n            dispatch(loginTC(values))\n            formik.resetForm();\n        },\n        validate: (values) => {\n            const errors: FormikErrorType = {};\n            if (!values.email) {\n                errors.email = 'Required Field';\n            } else if (!/^[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,4}$/i.test(values.email)) {\n                errors.email = 'Invalid email address';\n            }\n            if (!values.password) {\n                errors.password = 'Required Field';\n            } else if (values.password.length < 7) {\n                errors.password = 'Must be 7 characters or more';\n            }\n            return errors;\n        },\n    })\n\n    if (isLoggedIn) {\n        return <Redirect to={'/'}/>\n    }\n    return <Grid container justify=\"center\">\n        <Grid item xs={4}>\n            <form onSubmit={formik.handleSubmit}>\n                <FormControl>\n                    <FormLabel>\n                        <p>To log in get registered\n                            <a href={'https://social-network.samuraijs.com/'}\n                               target={'_blank'}>here</a>\n                        </p>\n                        <p>or use common test account credentials:</p>\n                        <p>Email: free@samuraijs.com</p>\n                        <p>Password: free</p>\n                    </FormLabel>\n                    <FormGroup>\n                        <TextField\n                            label=\"Email\"\n                            margin=\"normal\"\n                            {...formik.getFieldProps('email')}\n                        />\n                        {formik.touched.email && formik.errors.email &&\n                        <div style={{color: 'red'}}>{formik.errors.email}</div>}\n                        <TextField\n                            type=\"password\"\n                            label=\"Password\"\n                            margin=\"normal\"\n                            {...formik.getFieldProps('password')}\n                        />\n                        {formik.touched.password && formik.errors.password &&\n                        <div style={{color: 'red'}}>{formik.errors.password}</div>}\n                        <FormControlLabel\n                            label={'Remember me'}\n                            control={<Checkbox/>}\n                            checked={formik.values.rememberMe}\n                            {...formik.getFieldProps('rememberMe')}\n                        />\n                        <Button type={'submit'} variant={'contained'} color={'primary'}>Login</Button>\n                    </FormGroup>\n                </FormControl>\n            </form>\n        </Grid>\n    </Grid>\n}\n","D:\\react-prosto\\ToDoList\\src\\components\\ErrorSnackbar\\ErrorSnackbar.tsx",[],"D:\\react-prosto\\ToDoList\\src\\api\\todolists-api.ts",[],"D:\\react-prosto\\ToDoList\\src\\components\\AddItemForm\\AddItemForm.tsx",[],"D:\\react-prosto\\ToDoList\\src\\features\\TodolistsList\\Todolist\\Todolist.tsx",["85","86","87","88","89","90"],"import React, {useCallback, useEffect} from 'react'\r\nimport {AddItemForm} from '../../../components/AddItemForm/AddItemForm'\r\nimport {EditableSpan} from '../../../components/EditableSpan/EditableSpan'\r\nimport {Button, IconButton} from '@material-ui/core'\r\nimport {Delete} from '@material-ui/icons'\r\nimport {Task} from './Task/Task'\r\nimport {TaskStatuses, TaskType} from '../../../api/todolists-api'\r\nimport {FilterValuesType, TodolistDomainType} from '../todolists-reducer'\r\nimport {useDispatch} from 'react-redux'\r\nimport {fetchTasksTC} from '../tasks-reducer'\r\n\r\ntype PropsType = {\r\n    todolist: TodolistDomainType\r\n    tasks: Array<TaskType>\r\n    changeFilter: (value: FilterValuesType, todolistId: string) => void\r\n    addTask: (title: string, todolistId: string) => void\r\n    changeTaskStatus: (id: string, status: TaskStatuses, todolistId: string) => void\r\n    changeTaskTitle: (taskId: string, newTitle: string, todolistId: string) => void\r\n    removeTask: (taskId: string, todolistId: string) => void\r\n    removeTodolist: (id: string) => void\r\n    changeTodolistTitle: (id: string, newTitle: string) => void\r\n    demo?: boolean\r\n}\r\n\r\nexport const Todolist = React.memo(function ({demo = false, ...props}: PropsType) {\r\n    console.log('Todolist called')\r\n\r\n    const dispatch = useDispatch()\r\n    useEffect(() => {\r\n        if (demo) {\r\n            return\r\n        }\r\n        const thunk = fetchTasksTC(props.todolist.id)\r\n        dispatch(thunk)\r\n    }, [])\r\n\r\n    const addTask = useCallback((title: string) => {\r\n        props.addTask(title, props.todolist.id)\r\n    }, [props.addTask, props.todolist.id])\r\n\r\n    const removeTodolist = () => {\r\n        props.removeTodolist(props.todolist.id)\r\n    }\r\n    const changeTodolistTitle = useCallback((title: string) => {\r\n        props.changeTodolistTitle(props.todolist.id, title)\r\n    }, [props.todolist.id, props.changeTodolistTitle])\r\n\r\n    const onAllClickHandler = useCallback(() => props.changeFilter('all', props.todolist.id), [props.todolist.id, props.changeFilter])\r\n    const onActiveClickHandler = useCallback(() => props.changeFilter('active', props.todolist.id), [props.todolist.id, props.changeFilter])\r\n    const onCompletedClickHandler = useCallback(() => props.changeFilter('completed', props.todolist.id), [props.todolist.id, props.changeFilter])\r\n\r\n\r\n    let tasksForTodolist = props.tasks\r\n\r\n    if (props.todolist.filter === 'active') {\r\n        tasksForTodolist = props.tasks.filter(t => t.status === TaskStatuses.New)\r\n    }\r\n    if (props.todolist.filter === 'completed') {\r\n        tasksForTodolist = props.tasks.filter(t => t.status === TaskStatuses.Completed)\r\n    }\r\n\r\n    return <div>\r\n        <h3><EditableSpan value={props.todolist.title} onChange={changeTodolistTitle}/>\r\n            <IconButton onClick={removeTodolist} disabled={props.todolist.entityStatus === 'loading'}>\r\n                <Delete/>\r\n            </IconButton>\r\n        </h3>\r\n        <AddItemForm addItem={addTask} disabled={props.todolist.entityStatus === 'loading'}/>\r\n        <div>\r\n            {\r\n                tasksForTodolist.map(t => <Task key={t.id} task={t} todolistId={props.todolist.id}\r\n                                                removeTask={props.removeTask}\r\n                                                changeTaskTitle={props.changeTaskTitle}\r\n                                                changeTaskStatus={props.changeTaskStatus}\r\n                />)\r\n            }\r\n        </div>\r\n        <div style={{paddingTop: '10px'}}>\r\n            <Button variant={props.todolist.filter === 'all' ? 'outlined' : 'text'}\r\n                    onClick={onAllClickHandler}\r\n                    color={'default'}\r\n            >All\r\n            </Button>\r\n            <Button variant={props.todolist.filter === 'active' ? 'outlined' : 'text'}\r\n                    onClick={onActiveClickHandler}\r\n                    color={'primary'}>Active\r\n            </Button>\r\n            <Button variant={props.todolist.filter === 'completed' ? 'outlined' : 'text'}\r\n                    onClick={onCompletedClickHandler}\r\n                    color={'secondary'}>Completed\r\n            </Button>\r\n        </div>\r\n    </div>\r\n})\r\n\r\n\r\n","D:\\react-prosto\\ToDoList\\src\\features\\TodolistsList\\Todolist\\Task\\Task.tsx",["91","92","93"],"import React, {ChangeEvent, useCallback} from 'react'\r\nimport {Checkbox, IconButton} from '@material-ui/core'\r\nimport {EditableSpan} from '../../../../components/EditableSpan/EditableSpan'\r\nimport {Delete} from '@material-ui/icons'\r\nimport {TaskStatuses, TaskType} from '../../../../api/todolists-api'\r\n\r\ntype TaskPropsType = {\r\n    task: TaskType\r\n    todolistId: string\r\n    changeTaskStatus: (id: string, status: TaskStatuses, todolistId: string) => void\r\n    changeTaskTitle: (taskId: string, newTitle: string, todolistId: string) => void\r\n    removeTask: (taskId: string, todolistId: string) => void\r\n}\r\nexport const Task = React.memo((props: TaskPropsType) => {\r\n    const onClickHandler = useCallback(() => props.removeTask(props.task.id, props.todolistId), [props.task.id, props.todolistId]);\r\n\r\n    const onChangeHandler = useCallback((e: ChangeEvent<HTMLInputElement>) => {\r\n        let newIsDoneValue = e.currentTarget.checked\r\n        props.changeTaskStatus(props.task.id, newIsDoneValue ? TaskStatuses.Completed : TaskStatuses.New, props.todolistId)\r\n    }, [props.task.id, props.todolistId]);\r\n\r\n    const onTitleChangeHandler = useCallback((newValue: string) => {\r\n        props.changeTaskTitle(props.task.id, newValue, props.todolistId)\r\n    }, [props.task.id, props.todolistId]);\r\n\r\n    return <div key={props.task.id} className={props.task.status === TaskStatuses.Completed ? 'is-done' : ''}>\r\n        <Checkbox\r\n            checked={props.task.status === TaskStatuses.Completed}\r\n            color=\"primary\"\r\n            onChange={onChangeHandler}\r\n        />\r\n\r\n        <EditableSpan value={props.task.title} onChange={onTitleChangeHandler}/>\r\n        <IconButton onClick={onClickHandler}>\r\n            <Delete/>\r\n        </IconButton>\r\n    </div>\r\n})\r\n","D:\\react-prosto\\ToDoList\\src\\components\\EditableSpan\\EditableSpan.tsx",[],{"ruleId":"94","replacedBy":"95"},{"ruleId":"96","replacedBy":"97"},{"ruleId":"98","severity":1,"message":"99","line":38,"column":8,"nodeType":"100","endLine":38,"endColumn":10,"suggestions":"101"},{"ruleId":"102","severity":1,"message":"103","line":13,"column":94,"nodeType":"104","messageId":"105","endLine":13,"endColumn":96},{"ruleId":"102","severity":1,"message":"103","line":10,"column":45,"nodeType":"104","messageId":"105","endLine":10,"endColumn":47},{"ruleId":"98","severity":1,"message":"106","line":36,"column":8,"nodeType":"100","endLine":36,"endColumn":10,"suggestions":"107"},{"ruleId":"98","severity":1,"message":"108","line":41,"column":8,"nodeType":"100","endLine":41,"endColumn":10,"suggestions":"109"},{"ruleId":"98","severity":1,"message":"108","line":46,"column":8,"nodeType":"100","endLine":46,"endColumn":10,"suggestions":"110"},{"ruleId":"98","severity":1,"message":"108","line":51,"column":8,"nodeType":"100","endLine":51,"endColumn":10,"suggestions":"111"},{"ruleId":"98","severity":1,"message":"108","line":56,"column":8,"nodeType":"100","endLine":56,"endColumn":10,"suggestions":"112"},{"ruleId":"98","severity":1,"message":"108","line":61,"column":8,"nodeType":"100","endLine":61,"endColumn":10,"suggestions":"113"},{"ruleId":"98","severity":1,"message":"108","line":66,"column":8,"nodeType":"100","endLine":66,"endColumn":10,"suggestions":"114"},{"ruleId":"98","severity":1,"message":"108","line":71,"column":8,"nodeType":"100","endLine":71,"endColumn":10,"suggestions":"115"},{"ruleId":"116","severity":1,"message":"117","line":53,"column":29,"nodeType":"118","messageId":"119","endLine":54,"endColumn":50,"fix":"120"},{"ruleId":"98","severity":1,"message":"121","line":35,"column":8,"nodeType":"100","endLine":35,"endColumn":10,"suggestions":"122"},{"ruleId":"98","severity":1,"message":"123","line":39,"column":8,"nodeType":"100","endLine":39,"endColumn":42,"suggestions":"124"},{"ruleId":"98","severity":1,"message":"123","line":46,"column":8,"nodeType":"100","endLine":46,"endColumn":54,"suggestions":"125"},{"ruleId":"98","severity":1,"message":"123","line":48,"column":95,"nodeType":"100","endLine":48,"endColumn":134,"suggestions":"126"},{"ruleId":"98","severity":1,"message":"123","line":49,"column":101,"nodeType":"100","endLine":49,"endColumn":140,"suggestions":"127"},{"ruleId":"98","severity":1,"message":"123","line":50,"column":107,"nodeType":"100","endLine":50,"endColumn":146,"suggestions":"128"},{"ruleId":"98","severity":1,"message":"123","line":15,"column":97,"nodeType":"100","endLine":15,"endColumn":130,"suggestions":"129"},{"ruleId":"98","severity":1,"message":"123","line":20,"column":8,"nodeType":"100","endLine":20,"endColumn":41,"suggestions":"130"},{"ruleId":"98","severity":1,"message":"123","line":24,"column":8,"nodeType":"100","endLine":24,"endColumn":41,"suggestions":"131"},"no-native-reassign",["132"],"no-negated-in-lhs",["133"],"react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'dispatch'. Either include it or remove the dependency array.","ArrayExpression",["134"],"eqeqeq","Expected '!==' and instead saw '!='.","BinaryExpression","unexpected","React Hook useEffect has missing dependencies: 'demo', 'dispatch', and 'isLoggedIn'. Either include them or remove the dependency array.",["135"],"React Hook useCallback has a missing dependency: 'dispatch'. Either include it or remove the dependency array.",["136"],["137"],["138"],["139"],["140"],["141"],["142"],"react/jsx-no-target-blank","Using target=\"_blank\" without rel=\"noreferrer\" is a security risk: see https://html.spec.whatwg.org/multipage/links.html#link-type-noopener","JSXOpeningElement","noTargetBlank",{"range":"143","text":"144"},"React Hook useEffect has missing dependencies: 'demo', 'dispatch', and 'props.todolist.id'. Either include them or remove the dependency array.",["145"],"React Hook useCallback has a missing dependency: 'props'. Either include it or remove the dependency array. However, 'props' will change when *any* prop changes, so the preferred fix is to destructure the 'props' object outside of the useCallback call and refer to those specific props inside useCallback.",["146"],["147"],["148"],["149"],["150"],["151"],["152"],["153"],"no-global-assign","no-unsafe-negation",{"desc":"154","fix":"155"},{"desc":"156","fix":"157"},{"desc":"154","fix":"158"},{"desc":"154","fix":"159"},{"desc":"154","fix":"160"},{"desc":"154","fix":"161"},{"desc":"154","fix":"162"},{"desc":"154","fix":"163"},{"desc":"154","fix":"164"},[1893,1893]," rel=\"noreferrer\"",{"desc":"165","fix":"166"},{"desc":"167","fix":"168"},{"desc":"167","fix":"169"},{"desc":"167","fix":"170"},{"desc":"167","fix":"171"},{"desc":"167","fix":"172"},{"desc":"167","fix":"173"},{"desc":"167","fix":"174"},{"desc":"167","fix":"175"},"Update the dependencies array to be: [dispatch]",{"range":"176","text":"177"},"Update the dependencies array to be: [demo, dispatch, isLoggedIn]",{"range":"178","text":"179"},{"range":"180","text":"177"},{"range":"181","text":"177"},{"range":"182","text":"177"},{"range":"183","text":"177"},{"range":"184","text":"177"},{"range":"185","text":"177"},{"range":"186","text":"177"},"Update the dependencies array to be: [demo, dispatch, props.todolist.id]",{"range":"187","text":"188"},"Update the dependencies array to be: [props]",{"range":"189","text":"190"},{"range":"191","text":"190"},{"range":"192","text":"190"},{"range":"193","text":"190"},{"range":"194","text":"190"},{"range":"195","text":"190"},{"range":"196","text":"190"},{"range":"197","text":"190"},[1248,1250],"[dispatch]",[1326,1328],"[demo, dispatch, isLoggedIn]",[1497,1499],[1668,1670],[1873,1875],[2086,2088],[2287,2289],[2434,2436],[2613,2615],[1464,1466],"[demo, dispatch, props.todolist.id]",[1581,1615],"[props]",[1846,1892],[1991,2030],[2133,2172],[2281,2320],[765,798],[1071,1104],[1261,1294]]