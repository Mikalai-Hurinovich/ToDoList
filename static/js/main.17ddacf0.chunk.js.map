{"version":3,"sources":["state/todoList-reducer.ts","state/tasks-reducer.ts","state/store.ts","AddItemForm.tsx","EditableSpan.tsx","Task.tsx","TodoList.tsx","AppWithRedux.tsx","index.tsx"],"names":["todoListId_1","v1","todoListId_2","initialState","id","title","filter","isDone","rootReducer","combineReducers","tasks","state","action","type","copyState","todoListId","task","newTask","map","taskId","newIsDoneValue","todolistId","todoLists","tl","newTodoList","todoList","find","newTitle","newFilterValue","store","createStore","window","AddItemForm","React","memo","props","useState","setTitle","error","setError","addItem","trimmedTitle","trim","TextField","size","label","variant","color","onChange","event","currentTarget","value","onKeyPress","key","helperText","IconButton","onClick","AddBox","EditableSpan","editMode","setEditMode","onBlur","changeTitle","autoFocus","e","onDoubleClick","Task","changeTaskTitle","useCallback","className","Checkbox","checked","changeTaskStatus","removeTask","Delete","TodoList","addTask","addTasks","todoListID","removeTodoList","changeTodoListTitle","allTodoListTasks","tasksForTodoList","el","style","listStyle","paddingLeft","display","justifyContent","Button","changeTodoListFilter","AppWithRedux","dispatch","useDispatch","useSelector","taskID","TodoListID","taskTitle","changeTaskStatusAC","changeTaskTitleAC","changeFilter","FilterTodoListAC","ChangeTodolistTitleAC","addTodoList","AddTodoListAC","todoListComponent","Grid","item","Paper","elevation","padding","marginLeft","background","AppBar","position","Toolbar","edge","aria-label","Menu","Typography","Container","fixed","container","spacing","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.17ddacf0.chunk.js","sourcesContent":["import {FilterValuesType, TodoListType} from \"../App\";\nimport {v1} from \"uuid\";\n\nexport type RemoveTodolistActionType = {\n    type: 'REMOVE-TODOLIST'\n    id: string\n}\nexport type AddTodolistActionType = {\n    type: 'ADD-TODOLIST'\n    title: string\n    todoListId: string\n}\ntype ChangeTodolistTitleActionType = {\n    type: 'CHANGE-TODOLIST-TITLE'\n    newTitle: string\n    id: string\n}\ntype ChangeTodolistFilterActionType = {\n    type: 'CHANGE-TODOLIST-FILTER'\n    newFilterValue: FilterValuesType\n    id: string\n}\n\n// Все экшены\ntype ActionType = RemoveTodolistActionType | AddTodolistActionType |\n    ChangeTodolistTitleActionType |\n    ChangeTodolistFilterActionType\n\nexport const todoListId_1 = v1()\nexport const todoListId_2 = v1()\nlet initialState: Array<TodoListType> = [\n    {id: todoListId_1, title: 'What to Read', filter: 'all'},\n    {id: todoListId_2, title: 'What to Buy', filter: 'all'},\n]\nexport const todoListReducer = (state: TodoListType[] = initialState, action: ActionType) => {\n    switch (action.type) {\n        case \"REMOVE-TODOLIST\": {\n            return state.filter(tl => tl.id !== action.id);\n        }\n        case 'ADD-TODOLIST': {\n            // const newTodoListID = v1()\n            const newTodoList: TodoListType = {id: action.todoListId, title: action.title, filter: \"all\"}\n            return [...state, newTodoList]\n        }\n        case 'CHANGE-TODOLIST-TITLE': {\n            const todoList = state.find(tl => tl.id === action.id)\n            if (todoList) {\n                todoList.title = action.newTitle\n            }\n            return [...state]\n        }\n        case 'CHANGE-TODOLIST-FILTER': {\n            const todoList = state.find(tl => tl.id === action.id)\n            if (todoList) {\n                todoList.filter = action.newFilterValue\n            }\n            return [...state]\n        }\n        default:\n            return state;\n    }\n}\n\n// Создаем Action Creator, чтобы была возможность проводить манипуляции с данными action, например вызывать\n// console.log, сделать проверку и тд\nexport const RemoveTodolistAC = (id: string): RemoveTodolistActionType => {\n    return {type: 'REMOVE-TODOLIST', id}\n}\nexport const AddTodoListAC = (title: string): AddTodolistActionType => {\n    return {type: 'ADD-TODOLIST', title, todoListId: v1()}\n}\nexport const FilterTodoListAC = (newFilterValue: FilterValuesType, id: string): ChangeTodolistFilterActionType => {\n    // можем не писать newFilterValue: newFilterValue, тк названия одинаковы\n    return {type: 'CHANGE-TODOLIST-FILTER', newFilterValue, id}\n}\nexport const ChangeTodolistTitleAC = (newTitle: string, id: string): ChangeTodolistTitleActionType => {\n    return {type: 'CHANGE-TODOLIST-TITLE', newTitle, id}\n}\n","import {TaskStateType, TaskType} from \"../App\";\nimport {v1} from \"uuid\";\nimport {AddTodolistActionType, RemoveTodolistActionType, todoListId_1, todoListId_2} from \"./todoList-reducer\";\n\nexport type RemoveTaskActionType = {\n    type: 'REMOVE-TASK'\n    id: string\n    todoListId: string\n}\nexport type AddTaskActionType = {\n    type: 'ADD-TASK'\n    todoListId: string\n    title: string\n}\nexport type ChangeTaskStatusActionType = {\n    type: 'CHANGE-TASK-STATUS'\n    taskId: string\n    newIsDoneValue: boolean\n    todoListId: string\n}\nexport type ChangeTitleStatusActionType = {\n    type: 'CHANGE-TITLE-TITLE'\n    taskId: string\n    title: string\n    todoListId: string\n}\n\n// Все экшены\ntype ActionType = RemoveTaskActionType\n    | AddTaskActionType\n    | ChangeTaskStatusActionType\n    | ChangeTitleStatusActionType\n    | AddTodolistActionType\n    | RemoveTodolistActionType\n\nlet initialState: TaskStateType = {\n    [todoListId_1]: [\n        {id: v1(), title: 'Кинг', isDone: true},\n        {id: v1(), title: 'Булгаков', isDone: false},\n        {id: v1(), title: 'Ремарк', isDone: true},\n        {id: v1(), title: 'Достоевский', isDone: false},\n        {id: v1(), title: 'Пушкин', isDone: true},\n        {id: v1(), title: 'Фицжеральд', isDone: false},\n    ],\n    [todoListId_2]: [\n        {id: v1(), title: 'Milk', isDone: false},\n        {id: v1(), title: 'Bread', isDone: true},\n        {id: v1(), title: 'Cheese', isDone: false},\n        {id: v1(), title: 'Egg', isDone: false},\n        {id: v1(), title: 'Salad', isDone: false},\n        {id: v1(), title: 'Salmon', isDone: false},\n    ],\n}\nexport const taskReducer = (state: TaskStateType = initialState, action: ActionType) => {\n    switch (action.type) {\n        case 'REMOVE-TASK': {\n            let copyState = {...state}\n            copyState[action.todoListId] = copyState[action.todoListId].filter(task => task.id !== action.id)\n            return copyState;\n        }\n        case 'ADD-TASK': {\n            let copyState = {...state}\n            let newTask: TaskType = {id: v1(), title: action.title, isDone: false}\n            copyState[action.todoListId] = [newTask, ...copyState[action.todoListId]]\n            return copyState;\n            // variant #2\n            // let newTask: TaskType = {id: v1(), title: action.title, isDone: false}\n            // return {...state, [action.todoListId]: [newTask, ...state[action.todoListId]]}\n        }\n        case 'CHANGE-TASK-STATUS': {\n            return {\n                ...state,\n                [action.todoListId]: state[action.todoListId]\n                    .map(task => task.id === action.taskId\n                        ? {...task, isDone: action.newIsDoneValue}\n                        : task)\n            }\n        }\n\n        case 'CHANGE-TITLE-TITLE': {\n            return {\n                ...state,\n                [action.todoListId]: state[action.todoListId]\n                    .map(task => task.id === action.taskId\n                        ? {...task, title: action.title}\n                        : task)\n            }\n        }\n\n        case \"ADD-TODOLIST\":\n            let todolistId = action.todoListId;\n            return {...state, [todolistId]: []}\n        case 'REMOVE-TODOLIST': {\n            let copyState = {...state}\n            delete copyState[action.id]\n            return copyState\n        }\n        default:\n            return state;\n    }\n}\n\n\n// Создаем Action Creator, чтобы была возможность проводить манипуляции с данными action, например вызывать\n// console.log, сделать проверку и тд\nexport const removeTaskAC = (id: string, todoListId: string): RemoveTaskActionType => {\n    // можем не писать newFilterValue: newFilterValue, тк названия одинаковы\n    return {type: 'REMOVE-TASK', id, todoListId}\n}\nexport const addTaskAC = (title: string, todoListId: string): AddTaskActionType => {\n    return {type: 'ADD-TASK', title, todoListId}\n}\nexport const changeTaskStatusAC = (taskId: string, newIsDoneValue: boolean, todoListId: string): ChangeTaskStatusActionType => {\n    return {type: 'CHANGE-TASK-STATUS', newIsDoneValue, todoListId, taskId}\n}\nexport const changeTaskTitleAC = (taskId: string, title: string, todoListId: string): ChangeTitleStatusActionType => {\n    return {type: 'CHANGE-TITLE-TITLE', title, todoListId, taskId}\n}\nexport const AddTodolistAC = (title: string): AddTodolistActionType => {\n    return {type: 'ADD-TODOLIST', title, todoListId: v1()}\n}\n","import {taskReducer} from './tasks-reducer';\nimport {todoListReducer} from './todoList-reducer';\nimport {combineReducers, createStore} from 'redux';\n\n// объединяя reducer-ы с помощью combineReducers,\n// мы задаём структуру нашего единственного объекта-состояния\nconst rootReducer = combineReducers({\n    tasks: taskReducer,\n    todoLists: todoListReducer\n})\n// непосредственно создаём store\nexport const store = createStore(rootReducer);\n// определить автоматически тип всего объекта состояния\nexport type AppRootStateType = ReturnType<typeof rootReducer>\n\n// а это, чтобы можно было в консоли браузера обращаться к store в любой момент\n// @ts-ignore\nwindow.store = store;\n","import React, {useState, KeyboardEvent, ChangeEvent} from 'react';\nimport {IconButton, TextField} from \"@material-ui/core\";\nimport {AddBox} from \"@material-ui/icons\";\n\ntype AddItemFormPropsType = {\n    addItem: (title: string) => void\n}\n\nconst AddItemForm = React.memo((props: AddItemFormPropsType) => {\n    let [title, setTitle] = useState<string>('')\n    const [error, setError] = useState<boolean>(false)\n\n    const changeTitle = (event: ChangeEvent<HTMLInputElement>) => {\n        setTitle(event.currentTarget.value)\n        setError(false)\n    }\n    const onKeyPressAddItem = (event: KeyboardEvent<HTMLInputElement>) => {\n        if (event.key === 'Enter') addItem()\n    }\n    const addItem = () => {\n        const trimmedTitle = title.trim();\n        if (trimmedTitle) {\n            props.addItem(trimmedTitle)\n        } else {\n            setError(true)\n        }\n        setTitle('')\n    }\n    return (\n        <div>\n            <TextField\n                size={'small'}\n                label={'Title...'}\n                variant={'outlined'}\n                color={'secondary'}\n                onChange={changeTitle}\n                value={title}\n                onKeyPress={onKeyPressAddItem}\n                error={error}\n                helperText={error && 'Title is Required!'}\n            />\n            <IconButton onClick={addItem}>\n                <AddBox/>\n            </IconButton>\n        </div>\n    )\n})\n\nexport default AddItemForm;\n","import React, {useState, KeyboardEvent, ChangeEvent} from 'react';\nimport {TextField} from \"@material-ui/core\";\n\ntype EditableSpanPropsType = {\n    title: string\n    changeTitle: (newTitle: string) => void\n}\n\nconst EditableSpan = React.memo((props: EditableSpanPropsType) => {\n    let [editMode, setEditMode] = useState<boolean>(false);\n    let [title, setTitle] = useState<string>(props.title);\n    const onEditMode = () => setEditMode(true)\n    const offEditMode = () => {\n        setEditMode(false)\n        props.changeTitle(title)\n    }\n    const changeTitle = (event: ChangeEvent<HTMLInputElement>) => {\n        setTitle(event.currentTarget.value)\n    }\n    const changeOnEnter = (e: KeyboardEvent) => {\n        if (e.key === 'Enter') {\n            setEditMode(false)\n            props.changeTitle(title)\n        }\n    }\n    return (\n        editMode\n            ? <TextField\n                id={\"standard-basic\"}\n                label={\"Change Task\"}\n                variant={\"outlined\"}\n                color={'secondary'}\n                value={title}\n                onChange={changeTitle}\n                onBlur={offEditMode}\n                autoFocus={true}\n                onKeyPress={changeOnEnter}\n            />\n            : <span onDoubleClick={onEditMode}>{props.title}</span>\n    )\n})\n\n\nexport default EditableSpan;\n","import React, {ChangeEvent, useCallback} from 'react';\nimport {Checkbox, IconButton} from \"@material-ui/core\";\nimport EditableSpan from \"./EditableSpan\";\nimport {Delete} from \"@material-ui/icons\";\nimport {TaskType} from \"./AppWithRedux\";\n\nexport type TaskPropsType = {\n    task: TaskType\n    todoListId: string\n    changeTaskStatus: (taskId: string, newIsDoneValue: boolean, TodoListID: string) => void\n    changeTaskTitle: (taskId: string, newTitle: string, TodoListID: string) => void\n    removeTask: (taskID: string, TodoListID: string) => void\n}\nconst Task = React.memo((props: TaskPropsType) => {\n    const onClickHandler = () => props.removeTask(props.task.id, props.todoListId)\n    const changeTaskStatus = (e: ChangeEvent<HTMLInputElement>) => props.changeTaskStatus(props.task.id, e.currentTarget.checked, props.todoListId);\n    const changeTaskTitle = useCallback((newTitle: string) => {\n        props.changeTaskTitle(props.task.id, newTitle, props.todoListId)\n    }, [props])\n    return (\n        <li className={props.task.isDone ? 'is-done' : ''}\n            key={props.task.id}>\n            <Checkbox\n                color={'primary'}\n                checked={props.task.isDone}\n                onChange={changeTaskStatus}\n            />\n            <EditableSpan title={props.task.title} changeTitle={changeTaskTitle}/>\n            <IconButton onClick={onClickHandler} size={'small'}>\n                <Delete/>\n            </IconButton>\n        </li>\n    );\n})\n\nexport default Task;\n","import React, {ChangeEvent, useCallback} from 'react';\nimport {FilterValuesType, TaskType} from \"./App\";\nimport AddItemForm from \"./AddItemForm\";\nimport EditableSpan from \"./EditableSpan\";\nimport {Button, Checkbox, IconButton} from \"@material-ui/core\";\nimport {Delete} from \"@material-ui/icons\";\nimport Task from \"./Task\";\n\ntype TodoListPropsType = {\n    todoListID: string\n    title: string\n    tasks: Array<TaskType>\n    removeTask: (taskID: string, TodoListID: string) => void\n    addTasks: (taskTitle: string, TodoListID: string) => void\n    changeTodoListFilter: (newFilterValue: FilterValuesType, TodoListID: string) => void\n    changeTaskStatus: (taskId: string, newIsDoneValue: boolean, TodoListID: string) => void\n    changeTodoListTitle: (newTitle: string, TodoListID: string) => void\n    filter: FilterValuesType\n    removeTodoList: (todoListID: string) => void\n    changeTaskTitle: (taskId: string, newTitle: string, TodoListID: string) => void\n\n}\n\n\nconst TodoList = React.memo((props: TodoListPropsType) => {\n    const addTask = useCallback((title: string) => props.addTasks(title, props.todoListID), [props])\n    const all = () => props.changeTodoListFilter('all', props.todoListID)\n    const active = () => props.changeTodoListFilter('active', props.todoListID)\n    const completed = () => props.changeTodoListFilter('completed', props.todoListID)\n    const removeTodoList = useCallback(() => (props.removeTodoList(props.todoListID)), [props])\n    const changeTodoListTitle = useCallback((title: string) => props.changeTodoListTitle(title, props.todoListID),\n        [props.changeTodoListTitle, props.todoListID])\n\n    let allTodoListTasks = props.tasks;\n    let tasksForTodoList = allTodoListTasks;\n    if (props.filter === 'active') tasksForTodoList = allTodoListTasks.filter(el => !el.isDone)\n    if (props.filter === 'completed') tasksForTodoList = allTodoListTasks.filter(el => el.isDone)\n\n    const tasks = tasksForTodoList.map(task => {\n\n        return (\n            <Task key={task.id}\n                  task={task}\n                  todoListId={props.todoListID}\n                  changeTaskStatus={props.changeTaskStatus}\n                  removeTask={props.removeTask}\n                  changeTaskTitle={props.changeTaskTitle}\n            />\n        )\n    })\n\n    return (\n        <div>\n            <h3>\n                <EditableSpan title={props.title} changeTitle={changeTodoListTitle}/>\n                <IconButton onClick={removeTodoList} size={'medium'} color=\"inherit\">\n                    <Delete/>\n                </IconButton>\n            </h3>\n            <AddItemForm addItem={addTask}/>\n            <ul style={{listStyle: \"none\", paddingLeft: '0'}}>\n                {tasks}\n            </ul>\n            <div style={{display: 'flex', justifyContent: 'space-around'}}>\n                <Button\n                    variant={'contained'}\n                    color={props.filter === 'all' ? 'secondary' : 'primary'}\n                    size={'small'}\n                    className={props.filter === 'all' ? 'selected' : ''}\n                    onClick={all}>All\n                </Button>\n                <Button\n                    variant={'contained'}\n                    color={props.filter === 'active' ? 'secondary' : 'primary'}\n                    size={'small'}\n                    className={props.filter === 'active' ? 'selected' : ''}\n                    onClick={active}>Active\n                </Button>\n                <Button\n                    variant={'contained'}\n                    color={props.filter === 'completed' ? 'secondary' : 'primary'}\n                    size={'small'}\n                    className={props.filter === 'completed' ? 'selected' : ''}\n                    onClick={completed}>Completed\n                </Button>\n            </div>\n        </div>\n    )\n})\n\n\nexport default TodoList;\n","import React, {useCallback} from 'react';\nimport './App.css';\nimport TodoList from \"./TodoList\";\nimport AddItemForm from \"./AddItemForm\";\nimport {AppBar, Button, Container, Grid, IconButton, Paper, Toolbar, Typography} from \"@material-ui/core\";\nimport {Menu} from \"@material-ui/icons\";\nimport {AddTodoListAC, ChangeTodolistTitleAC, FilterTodoListAC, RemoveTodolistAC} from \"./state/todoList-reducer\";\nimport {addTaskAC, changeTaskStatusAC, changeTaskTitleAC, removeTaskAC} from \"./state/tasks-reducer\";\nimport {useDispatch, useSelector} from \"react-redux\";\nimport {AppRootStateType} from \"./state/store\";\n\nexport type TaskType = {\n    id: string\n    title: string\n    isDone: boolean\n}\nexport type FilterValuesType = 'all' | 'active' | 'completed'\n\nexport type TodoListType = {\n    id: string\n    title: string\n    filter: FilterValuesType\n}\n\nexport type TaskStateType = {\n    [key: string]: Array<TaskType>\n}\n\nconst AppWithRedux = () => {\n    // BLL: Business Logic Layer\n    // const todoListId_1 = v1()\n    // const todoListId_2 = v1()\n    // const [todoLists, dispatchTodoLists] = useReducer(todoListReducer, [\n    //     {id: todoListId_1, title: 'What to Read', filter: 'all'},\n    //     {id: todoListId_2, title: 'What to Buy', filter: 'all'},\n    // ])\n    // const [tasks, dispatchTasks] = useReducer(taskReducer, {\n    //     [todoListId_1]: [\n    //         {id: v1(), title: 'Кинг', isDone: true},\n    //         {id: v1(), title: 'Булгаков', isDone: false},\n    //         {id: v1(), title: 'Ремарк', isDone: true},\n    //         {id: v1(), title: 'Достоевский', isDone: false},\n    //         {id: v1(), title: 'Пушкин', isDone: true},\n    //         {id: v1(), title: 'Фицжеральд', isDone: false},\n    //     ],\n    //     [todoListId_2]: [\n    //         {id: v1(), title: 'Milk', isDone: false},\n    //         {id: v1(), title: 'Bread', isDone: true},\n    //         {id: v1(), title: 'Cheese', isDone: false},\n    //         {id: v1(), title: 'Egg', isDone: false},\n    //         {id: v1(), title: 'Salad', isDone: false},\n    //         {id: v1(), title: 'Salmon', isDone: false},\n    //     ],\n    // })\n    let dispatch = useDispatch()\n\n    let todoLists = useSelector<AppRootStateType, TodoListType[]>(state => state.todoLists)\n\n    let tasks = useSelector<AppRootStateType, TaskStateType>(state => state.tasks)\n\n    const removeTask = useCallback((taskID: string, TodoListID: string) => {\n        dispatch(removeTaskAC(taskID, TodoListID))\n    }, [dispatch])\n\n    const addTasks = useCallback((taskTitle: string, TodoListID: string) => {\n        dispatch(addTaskAC(taskTitle, TodoListID))\n    }, [dispatch])\n\n    const changeTaskStatus = useCallback((taskId: string, newIsDoneValue: boolean, TodoListID: string) => {\n        dispatch(changeTaskStatusAC(taskId, newIsDoneValue, TodoListID))\n    }, [dispatch])\n\n    const changeTaskTitle = useCallback((taskId: string, newTitle: string, TodoListID: string) => {\n        dispatch(changeTaskTitleAC(taskId, newTitle, TodoListID))\n    }, [dispatch])\n\n    const changeFilter = useCallback((newFilterValue: FilterValuesType, TodoListID: string) => {\n        dispatch(FilterTodoListAC(newFilterValue, TodoListID))\n    }, [dispatch])\n\n    const changeTodoListTitle = useCallback((newTitle: string, TodoListID: string) => {\n        dispatch(ChangeTodolistTitleAC(newTitle, TodoListID))\n    }, [dispatch])\n\n    const removeTodoList = useCallback((todoListID: string) => {\n        dispatch(RemoveTodolistAC(todoListID))\n    }, [dispatch])\n\n    const addTodoList = useCallback((title: string) => {\n        dispatch(AddTodoListAC(title))\n    }, [dispatch])\n\n    //UI\n    //CRUD: create, read, update, delete - список простейших действий, которые можно выполнить с данными\n    const todoListComponent = todoLists.map(tl => {\n        return (\n            <Grid item key={tl.id}>\n                <Paper elevation={6} style={{padding: '30px', marginLeft: '20px', background: '#dff5f8'}}>\n                    <TodoList\n                        key={tl.id}\n                        changeTaskTitle={changeTaskTitle}\n                        todoListID={tl.id}\n                        changeTaskStatus={changeTaskStatus}\n                        title={tl.title}\n                        filter={tl.filter}\n                        tasks={tasks[tl.id]}\n                        removeTask={removeTask}\n                        changeTodoListFilter={changeFilter}\n                        addTasks={addTasks}\n                        removeTodoList={removeTodoList}\n                        changeTodoListTitle={changeTodoListTitle}\n                    />\n                </Paper>\n            </Grid>\n        )\n    })\n    return (\n        <div className=\"App\">\n            <AppBar position={'static'}>\n                <Toolbar>\n                    <IconButton edge={\"start\"} color={'inherit'} aria-label={'menu'}>\n                        <Menu/>\n                    </IconButton>\n                    <Typography variant={'h6'}>\n                        Todolist\n                    </Typography>\n                    <Button color={'inherit'}></Button>\n                </Toolbar>\n            </AppBar>\n            <Container fixed>\n                <Grid container style={{padding: '18px'}}>\n                    <AddItemForm addItem={addTodoList}/>\n                </Grid>\n                <Grid container spacing={4}>\n                    {todoListComponent}\n                </Grid>\n            </Container>\n        </div>\n    );\n}\n\nexport default AppWithRedux;\n\n\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport {Provider} from \"react-redux\";\r\nimport {store} from \"./state/store\";\r\nimport AppWithRedux from \"./AppWithRedux\";\r\n\r\nReactDOM.render(\r\n    <Provider store={store}>\r\n        <AppWithRedux/>\r\n    </Provider>, document.getElementById('root'));\r\n\r\n"],"sourceRoot":""}