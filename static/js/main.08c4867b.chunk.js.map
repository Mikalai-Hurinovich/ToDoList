{"version":3,"sources":["state/todoList-reducer.ts","state/tasks-reducer.ts","state/store.ts","AddItemForm.tsx","EditableSpan.tsx","TodoList.tsx","AppWithRedux.tsx","index.tsx"],"names":["todoListId_1","v1","todoListId_2","initialState","id","title","filter","isDone","rootReducer","combineReducers","tasks","state","action","type","copyState","todoListId","task","newTask","find","t","taskId","newIsDoneValue","todolistId","todoLists","tl","newTodoList","todoList","newTitle","newFilterValue","store","createStore","window","AddItemForm","props","useState","setTitle","error","setError","addItem","trimmedTitle","trim","TextField","size","label","variant","color","onChange","event","currentTarget","value","onKeyPress","key","helperText","IconButton","onClick","AddBox","EditableSpan","editMode","setEditMode","onBlur","changeTitle","autoFocus","e","onDoubleClick","TodoList","map","className","Checkbox","checked","changeTaskStatus","todoListID","changeTaskTitle","removeTask","Delete","changeTodoListTitle","removeTodoList","addTasks","style","listStyle","paddingLeft","display","justifyContent","Button","changeTodoListFilter","AppWithRedux","dispatch","useDispatch","useSelector","taskID","TodoListID","taskTitle","changeTaskStatusAC","changeTaskTitleAC","changeFilter","FilterTodoListAC","ChangeTodolistTitleAC","todoListComponent","tasksForTodoList","el","Grid","item","Paper","elevation","padding","marginLeft","background","AppBar","position","Toolbar","edge","aria-label","Menu","Typography","Container","fixed","container","AddTodoListAC","spacing","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.08c4867b.chunk.js","sourcesContent":["import {FilterValuesType, TodoListType} from \"../App\";\nimport {v1} from \"uuid\";\n\nexport type RemoveTodolistActionType = {\n    type: 'REMOVE-TODOLIST'\n    id: string\n}\nexport type AddTodolistActionType = {\n    type: 'ADD-TODOLIST'\n    title: string\n    todoListId: string\n}\ntype ChangeTodolistTitleActionType = {\n    type: 'CHANGE-TODOLIST-TITLE'\n    newTitle: string\n    id: string\n}\ntype ChangeTodolistFilterActionType = {\n    type: 'CHANGE-TODOLIST-FILTER'\n    newFilterValue: FilterValuesType\n    id: string\n}\n\n// Все экшены\ntype ActionType = RemoveTodolistActionType | AddTodolistActionType |\n    ChangeTodolistTitleActionType |\n    ChangeTodolistFilterActionType\n\nexport const todoListId_1 = v1()\nexport const todoListId_2 = v1()\nlet initialState: Array<TodoListType> = [\n    {id: todoListId_1, title: 'What to Read', filter: 'all'},\n    {id: todoListId_2, title: 'What to Buy', filter: 'all'},\n]\nexport const todoListReducer = (state: TodoListType[] = initialState, action: ActionType) => {\n    debugger\n    switch (action.type) {\n        case \"REMOVE-TODOLIST\": {\n            return state.filter(tl => tl.id !== action.id);\n        }\n        case 'ADD-TODOLIST': {\n            const newTodoListID = v1()\n            const newTodoList: TodoListType = {id: action.todoListId, title: action.title, filter: \"all\"}\n            return [...state, newTodoList]\n        }\n        case 'CHANGE-TODOLIST-TITLE': {\n            const todoList = state.find(tl => tl.id === action.id)\n            if (todoList) {\n                todoList.title = action.newTitle\n            }\n            return [...state]\n        }\n        case 'CHANGE-TODOLIST-FILTER': {\n            const todoList = state.find(tl => tl.id === action.id)\n            if (todoList) {\n                todoList.filter = action.newFilterValue\n            }\n            return [...state]\n        }\n        default:\n            return state;\n    }\n}\n\n// Создаем Action Creator, чтобы была возможность проводить манипуляции с данными action, например вызывать\n// console.log, сделать проверку и тд\nexport const RemoveTodolistAC = (id: string): RemoveTodolistActionType => {\n    return {type: 'REMOVE-TODOLIST', id}\n}\nexport const AddTodoListAC = (title: string): AddTodolistActionType => {\n    return {type: 'ADD-TODOLIST', title, todoListId: v1()}\n}\nexport const FilterTodoListAC = (newFilterValue: FilterValuesType, id: string): ChangeTodolistFilterActionType => {\n    // можем не писать newFilterValue: newFilterValue, тк названия одинаковы\n    return {type: 'CHANGE-TODOLIST-FILTER', newFilterValue, id}\n}\nexport const ChangeTodolistTitleAC = (newTitle: string, id: string): ChangeTodolistTitleActionType => {\n    return {type: 'CHANGE-TODOLIST-TITLE', newTitle, id}\n}\n","import {TaskStateType, TaskType} from \"../App\";\nimport {v1} from \"uuid\";\nimport {AddTodolistActionType, RemoveTodolistActionType, todoListId_1, todoListId_2} from \"./todoList-reducer\";\n\nexport type RemoveTaskActionType = {\n    type: 'REMOVE-TASK'\n    id: string\n    todoListId: string\n}\nexport type AddTaskActionType = {\n    type: 'ADD-TASK'\n    todoListId: string\n    title: string\n}\nexport type ChangeTaskStatusActionType = {\n    type: 'CHANGE-TASK-STATUS'\n    taskId: string\n    newIsDoneValue: boolean\n    todoListId: string\n}\nexport type ChangeTitleStatusActionType = {\n    type: 'CHANGE-TITLE-STATUS'\n    taskId: string\n    title: string\n    todoListId: string\n}\n\n// Все экшены\ntype ActionType = RemoveTaskActionType\n    | AddTaskActionType\n    | ChangeTaskStatusActionType\n    | ChangeTitleStatusActionType\n    | AddTodolistActionType\n    | RemoveTodolistActionType\n\nlet initialState: TaskStateType = {\n    [todoListId_1]: [\n        {id: v1(), title: 'Кинг', isDone: true},\n        {id: v1(), title: 'Булгаков', isDone: false},\n        {id: v1(), title: 'Ремарк', isDone: true},\n        {id: v1(), title: 'Достоевский', isDone: false},\n        {id: v1(), title: 'Пушкин', isDone: true},\n        {id: v1(), title: 'Фицжеральд', isDone: false},\n    ],\n    [todoListId_2]: [\n        {id: v1(), title: 'Milk', isDone: false},\n        {id: v1(), title: 'Bread', isDone: true},\n        {id: v1(), title: 'Cheese', isDone: false},\n        {id: v1(), title: 'Egg', isDone: false},\n        {id: v1(), title: 'Salad', isDone: false},\n        {id: v1(), title: 'Salmon', isDone: false},\n    ],\n}\nexport const taskReducer = (state: TaskStateType = initialState, action: ActionType) => {\n    switch (action.type) {\n        case 'REMOVE-TASK': {\n            let copyState = {...state}\n            copyState[action.todoListId] = copyState[action.todoListId].filter(task => task.id !== action.id)\n            return copyState;\n        }\n        case 'ADD-TASK': {\n            let copyState = {...state}\n            let newTask: TaskType = {id: v1(), title: action.title, isDone: false}\n            copyState[action.todoListId] = [newTask, ...copyState[action.todoListId]]\n            return copyState;\n            // variant #2\n            // let newTask: TaskType = {id: v1(), title: action.title, isDone: false}\n            // return {...state, [action.todoListId]: [newTask, ...state[action.todoListId]]}\n        }\n        case 'CHANGE-TASK-STATUS': {\n            let copyState = {...state}\n            const task = copyState[action.todoListId].find(t => t.id === action.taskId)\n            // Проверка на то, что в таск не попало случайно значение типа false -> undefined, null , 0, '', NaN\n            if (task) {\n                task.isDone = action.newIsDoneValue\n                //разворачиваем массив, сравниваем поверхностную копию с ориг. массивом, и реакт понимает что надо изменить\n            }\n            return copyState\n        }\n        case 'CHANGE-TITLE-STATUS': {\n            let copyState = {...state}\n            const task = copyState[action.todoListId].find(t => t.id === action.taskId)\n            // Проверка на то, что в таск не попало случайно значение типа false -> undefined, null , 0, '', NaN\n            if (task) {\n                task.title = action.title\n                //разворачиваем массив, сравниваем поверхностную копию с ориг. массивом, и реакт понимает что надо изменить\n            }\n            return copyState\n        }\n        case \"ADD-TODOLIST\":\n            let todolistId = action.todoListId;\n            return {...state, [todolistId]: []}\n        case 'REMOVE-TODOLIST': {\n            let copyState = {...state}\n            delete copyState[action.id]\n            return copyState\n        }\n        default:\n            return state;\n    }\n}\n\n\n// Создаем Action Creator, чтобы была возможность проводить манипуляции с данными action, например вызывать\n// console.log, сделать проверку и тд\nexport const removeTaskAC = (id: string, todoListId: string): RemoveTaskActionType => {\n    // можем не писать newFilterValue: newFilterValue, тк названия одинаковы\n    return {type: 'REMOVE-TASK', id, todoListId}\n}\nexport const addTaskAC = (title: string, todoListId: string): AddTaskActionType => {\n    return {type: 'ADD-TASK', title, todoListId}\n}\nexport const changeTaskStatusAC = (taskId: string, newIsDoneValue: boolean, todoListId: string): ChangeTaskStatusActionType => {\n    return {type: 'CHANGE-TASK-STATUS', newIsDoneValue, todoListId, taskId}\n}\nexport const changeTaskTitleAC = (taskId: string, title: string, todoListId: string): ChangeTitleStatusActionType => {\n    return {type: 'CHANGE-TITLE-STATUS', title, todoListId, taskId}\n}\nexport const AddTodolistAC = (title: string): AddTodolistActionType => {\n    return {type: 'ADD-TODOLIST', title, todoListId: v1()}\n}\n","import {taskReducer} from './tasks-reducer';\nimport {todoListReducer} from './todoList-reducer';\nimport {combineReducers, createStore} from 'redux';\n\n// объединяя reducer-ы с помощью combineReducers,\n// мы задаём структуру нашего единственного объекта-состояния\nconst rootReducer = combineReducers({\n    tasks: taskReducer,\n    todoLists: todoListReducer\n})\n// непосредственно создаём store\nexport const store = createStore(rootReducer);\n// определить автоматически тип всего объекта состояния\nexport type AppRootStateType = ReturnType<typeof rootReducer>\n\n// а это, чтобы можно было в консоли браузера обращаться к store в любой момент\n// @ts-ignore\nwindow.store = store;\n","import React, {useState, KeyboardEvent, ChangeEvent} from 'react';\nimport {IconButton, TextField} from \"@material-ui/core\";\nimport {AddBox} from \"@material-ui/icons\";\n\ntype AddItemFormPropsType = {\n    addItem: (title: string) => void\n}\n\nconst AddItemForm = (props: AddItemFormPropsType) => {\n    let [title, setTitle] = useState<string>('')\n    const [error, setError] = useState<boolean>(false)\n\n    const changeTitle = (event: ChangeEvent<HTMLInputElement>) => {\n        setTitle(event.currentTarget.value)\n        setError(false)\n    }\n    const onKeyPressAddItem = (event: KeyboardEvent<HTMLInputElement>) => {\n        if (event.key === 'Enter') addItem()\n    }\n    const addItem = () => {\n\n        const trimmedTitle = title.trim();\n        if (trimmedTitle) {\n            props.addItem(trimmedTitle)\n        } else {\n            setError(true)\n        }\n        setTitle('')\n    }\n    return (\n        <div>\n            <TextField\n                size={'small'}\n                label={'Title...'}\n                variant={'outlined'}\n                color={'secondary'}\n                onChange={changeTitle}\n                value={title}\n                onKeyPress={onKeyPressAddItem}\n                error={error}\n                helperText={error && 'Title is Required!'}\n            />\n            <IconButton onClick={addItem}>\n                <AddBox/>\n            </IconButton>\n        </div>\n    )\n}\n\nexport default AddItemForm;\n","import React, {useState, KeyboardEvent, ChangeEvent} from 'react';\nimport {TextField} from \"@material-ui/core\";\n\ntype EditableSpanPropsType = {\n    title: string\n    changeTitle: (newTitle: string) => void\n}\n\nconst EditableSpan = (props: EditableSpanPropsType) => {\n    let [editMode, setEditMode] = useState<boolean>(false);\n    let [title, setTitle] = useState<string>(props.title);\n    const onEditMode = () => setEditMode(true)\n    const offEditMode = () => {\n        setEditMode(false)\n        props.changeTitle(title)\n    }\n    const changeTitle = (event: ChangeEvent<HTMLInputElement>) => {\n        setTitle(event.currentTarget.value)\n    }\n    const changeOnEnter = (e: KeyboardEvent) => {\n        if (e.key === 'Enter') {\n            setEditMode(false)\n            props.changeTitle(title)\n        }\n    }\n    return (\n        editMode\n            ? <TextField\n                id={\"standard-basic\"}\n                label={\"Change Task\"}\n                variant={\"outlined\"}\n                color={'secondary'}\n                value={title}\n                onChange={changeTitle}\n                onBlur={offEditMode}\n                autoFocus={true}\n                onKeyPress={changeOnEnter}\n            />\n            : <span onDoubleClick={onEditMode}>{props.title}</span>\n    )\n}\n\n\nexport default EditableSpan;\n","import React, {useState, KeyboardEvent, ChangeEvent} from 'react';\nimport {FilterValuesType, TaskType} from \"./App\";\nimport AddItemForm from \"./AddItemForm\";\nimport EditableSpan from \"./EditableSpan\";\nimport {Button, Checkbox, IconButton} from \"@material-ui/core\";\nimport {CheckBox, Delete} from \"@material-ui/icons\";\n\ntype TodoListPropsType = {\n    todoListID: string\n    title: string\n    tasks: Array<TaskType>\n    removeTask: (taskID: string, TodoListID: string) => void\n    addTasks: (taskTitle: string, TodoListID: string) => void\n    changeTodoListFilter: (newFilterValue: FilterValuesType, TodoListID: string) => void\n    changeTaskStatus: (taskId: string, newIsDoneValue: boolean, TodoListID: string) => void\n    changeTodoListTitle: (newTitle: string, TodoListID: string) => void\n    filter: FilterValuesType\n    removeTodoList: (todoListID: string) => void\n    changeTaskTitle: (taskId: string, newTitle: string, TodoListID: string) => void\n\n}\n\n\nfunction TodoList(props: TodoListPropsType) {\n    const addTask = (title: string) => props.addTasks(title, props.todoListID)\n    const all = () => props.changeTodoListFilter('all', props.todoListID)\n    const active = () => props.changeTodoListFilter('active', props.todoListID)\n    const completed = () => props.changeTodoListFilter('completed', props.todoListID)\n    const removeTodoList = () => props.removeTodoList(props.todoListID)\n    const changeTodoListTitle = (title: string) => props.changeTodoListTitle(title, props.todoListID)\n\n    const tasks = props.tasks.map(task => {\n        const onClickHandler = () => props.removeTask(task.id, props.todoListID)\n        const changeTaskStatus = (e: ChangeEvent<HTMLInputElement>) => props.changeTaskStatus(task.id, e.currentTarget.checked, props.todoListID);\n        const changeTaskTitle = (newTitle: string) => {\n            props.changeTaskTitle(task.id, newTitle, props.todoListID)\n        }\n        return (\n            <li className={task.isDone ? 'is-done' : ''}\n                key={task.id}>\n                <Checkbox\n                    color={'primary'}\n                    checked={task.isDone}\n                    onChange={changeTaskStatus}\n                />\n                <EditableSpan title={task.title} changeTitle={changeTaskTitle}/>\n                <IconButton onClick={onClickHandler} size={'small'}>\n                    <Delete/>\n                </IconButton>\n            </li>\n        )\n    })\n    return (\n        <div>\n            <h3>\n                <EditableSpan title={props.title} changeTitle={changeTodoListTitle}/>\n                <IconButton onClick={removeTodoList} size={'medium'} color=\"inherit\">\n                    <Delete/>\n                </IconButton>\n            </h3>\n            <AddItemForm addItem={addTask}/>\n            <ul style={{listStyle: \"none\", paddingLeft: '0'}}>\n                {tasks}\n            </ul>\n            <div style={{display: 'flex', justifyContent: 'space-around'}}>\n                <Button\n                    variant={'contained'}\n                    color={props.filter === 'all' ? 'secondary' : 'primary'}\n                    size={'small'}\n                    className={props.filter === 'all' ? 'selected' : ''}\n                    onClick={all}>All\n                </Button>\n                <Button\n                    variant={'contained'}\n                    color={props.filter === 'active' ? 'secondary' : 'primary'}\n                    size={'small'}\n                    className={props.filter === 'active' ? 'selected' : ''}\n                    onClick={active}>Active\n                </Button>\n                <Button\n                    variant={'contained'}\n                    color={props.filter === 'completed' ? 'secondary' : 'primary'}\n                    size={'small'}\n                    className={props.filter === 'completed' ? 'selected' : ''}\n                    onClick={completed}>Completed\n                </Button>\n            </div>\n        </div>\n    )\n}\n\n\nexport default TodoList;\n","import React, {useReducer} from 'react';\nimport './App.css';\nimport TodoList from \"./TodoList\";\nimport AddItemForm from \"./AddItemForm\";\nimport {AppBar, Button, Container, Grid, IconButton, Paper, Toolbar, Typography} from \"@material-ui/core\";\nimport {Menu} from \"@material-ui/icons\";\nimport {\n    AddTodoListAC,\n    ChangeTodolistTitleAC,\n    FilterTodoListAC,\n    RemoveTodolistAC,\n    todoListReducer\n} from \"./state/todoList-reducer\";\nimport {addTaskAC, changeTaskStatusAC, changeTaskTitleAC, removeTaskAC, taskReducer} from \"./state/tasks-reducer\";\nimport {useDispatch, useSelector} from \"react-redux\";\nimport {AppRootStateType} from \"./state/store\";\n\nexport type TaskType = {\n    id: string\n    title: string\n    isDone: boolean\n}\n\nexport type FilterValuesType = 'all' | 'active' | 'completed'\n\nexport type TodoListType = {\n    id: string\n    title: string\n    filter: FilterValuesType\n}\n\nexport type TaskStateType = {\n    [key: string]: Array<TaskType>\n}\n\nconst AppWithRedux = () => {\n    // BLL: Business Logic Layer\n    // const todoListId_1 = v1()\n    // const todoListId_2 = v1()\n    // const [todoLists, dispatchTodoLists] = useReducer(todoListReducer, [\n    //     {id: todoListId_1, title: 'What to Read', filter: 'all'},\n    //     {id: todoListId_2, title: 'What to Buy', filter: 'all'},\n    // ])\n    // const [tasks, dispatchTasks] = useReducer(taskReducer, {\n    //     [todoListId_1]: [\n    //         {id: v1(), title: 'Кинг', isDone: true},\n    //         {id: v1(), title: 'Булгаков', isDone: false},\n    //         {id: v1(), title: 'Ремарк', isDone: true},\n    //         {id: v1(), title: 'Достоевский', isDone: false},\n    //         {id: v1(), title: 'Пушкин', isDone: true},\n    //         {id: v1(), title: 'Фицжеральд', isDone: false},\n    //     ],\n    //     [todoListId_2]: [\n    //         {id: v1(), title: 'Milk', isDone: false},\n    //         {id: v1(), title: 'Bread', isDone: true},\n    //         {id: v1(), title: 'Cheese', isDone: false},\n    //         {id: v1(), title: 'Egg', isDone: false},\n    //         {id: v1(), title: 'Salad', isDone: false},\n    //         {id: v1(), title: 'Salmon', isDone: false},\n    //     ],\n    // })\n    let dispatch = useDispatch()\n\n    let todoLists = useSelector<AppRootStateType, TodoListType[]>(state => state.todoLists)\n\n    let tasks = useSelector<AppRootStateType, TaskStateType>(state => state.tasks)\n\n    function removeTask(taskID: string, TodoListID: string) {\n        dispatch(removeTaskAC(taskID, TodoListID))\n    }\n\n    function addTasks(taskTitle: string, TodoListID: string) {\n        dispatch(addTaskAC(taskTitle, TodoListID))\n    }\n\n    function changeTaskStatus(taskId: string, newIsDoneValue: boolean, TodoListID: string) {\n        dispatch(changeTaskStatusAC(taskId, newIsDoneValue, TodoListID))\n    }\n\n    function changeTaskTitle(taskId: string, newTitle: string, TodoListID: string) {\n        dispatch(changeTaskTitleAC(taskId, newTitle, TodoListID))\n    }\n\n    function changeFilter(newFilterValue: FilterValuesType, TodoListID: string) {\n        dispatch(FilterTodoListAC(newFilterValue, TodoListID))\n    }\n\n    function changeTodoListTitle(newTitle: string, TodoListID: string) {\n        dispatch(ChangeTodolistTitleAC(newTitle, TodoListID))\n    }\n\n    function removeTodoList(todoListID: string) {\n        dispatch(RemoveTodolistAC(todoListID))\n    }\n\n    function addTodoList(title: string) {\n        dispatch(AddTodoListAC(title))\n    }\n\n    //UI\n    //CRUD: create, read, update, delete - список простейших действий, которые можно выполнить с данными\n    const todoListComponent = todoLists.map(tl => {\n        let tasksForTodoList = tasks[tl.id]\n        if (tl.filter === 'active') tasksForTodoList = tasksForTodoList.filter(el => !el.isDone)\n        if (tl.filter === 'completed') tasksForTodoList = tasksForTodoList.filter(el => el.isDone)\n        return (\n            <Grid item key={tl.id}>\n                <Paper elevation={6} style={{padding: '30px', marginLeft: '20px', background: '#dff5f8'}}>\n                    <TodoList\n                        changeTaskTitle={changeTaskTitle}\n                        todoListID={tl.id}\n                        changeTaskStatus={changeTaskStatus}\n                        title={tl.title}\n                        filter={tl.filter}\n                        tasks={tasksForTodoList}\n                        removeTask={removeTask}\n                        changeTodoListFilter={changeFilter}\n                        addTasks={addTasks}\n                        removeTodoList={removeTodoList}\n                        changeTodoListTitle={changeTodoListTitle}\n                    />\n                </Paper>\n            </Grid>\n        )\n    })\n    return (\n        <div className=\"App\">\n            <AppBar position={'static'}>\n                <Toolbar>\n                    <IconButton edge={\"start\"} color={'inherit'} aria-label={'menu'}>\n                        <Menu/>\n                    </IconButton>\n                    <Typography variant={'h6'}>\n                        Todolist\n                    </Typography>\n                    <Button color={'inherit'}></Button>\n                </Toolbar>\n            </AppBar>\n            <Container fixed>\n                <Grid container style={{padding: '18px'}}>\n                    <AddItemForm addItem={addTodoList}/>\n                </Grid>\n                <Grid container spacing={4}>\n                    {todoListComponent}\n                </Grid>\n            </Container>\n        </div>\n    );\n}\n\nexport default AppWithRedux;\n\n\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport {Provider} from \"react-redux\";\r\nimport {store} from \"./state/store\";\r\nimport AppWithRedux from \"./AppWithRedux\";\r\n\r\ndebugger\r\nReactDOM.render(\r\n    <Provider store={store}>\r\n        <AppWithRedux/>\r\n    </Provider>, document.getElementById('root'));\r\n\r\n"],"sourceRoot":""}